y = train$loss
y = mtcars$hp
y
View(mtcars)
View(mtcars %>% select(mpg,wt,drat) %>% data.matrix())
?select
ncol(train)
train[132]
x = train[-c(1,ncol(train))]
View(x)
ncol(x)
colnames(x)
lambdas <- 10^seq(3, -2, by = -.1)
lambdas
lambdas = 10^seq(3, -2, by = -.1)
fit = cv.glmnet(x, y, alpha=0, lambda=lambdas)
y = train$loss
x = train[-c(1,ncol(train))]
lambdas = 10^seq(3, -2, by = -.1)
fit = cv.glmnet(x, y, alpha=0, lambda=lambdas)
x = train[-c(1,ncol(train))] %>% data.matrix()
lambdas = 10^seq(3, -2, by = -.1)
fit = cv.glmnet(x, y, alpha=0, lambda=lambdas)
summary(fit)
plot(fit)
plot(fit)
fit$lambda.min
opt_lambda = fit$lambda.min
predict(fit, s=opt_lambda, newx=x)
y_pred = predict(fit, s=opt_lambda, newx=x)
sst <- sum((y - mean(y))^2)
sse <- sum((y_pred - y)^2)
sst
sse
rsq <- 1 - sse / sst
rsq
lambdas
lambdas = seq(0.1, 1, by=0.5)
lambdas
lambdas = seq(0.1, 1, by=0.05)
lambdas
fit = cv.glmnet(x, y, alpha=0, lambda=lambdas)
opt_lambda = fit$lambda.min
opt_lambda
lambdas = seq(0.1, 10, by=0.5)
lambdas
fit = cv.glmnet(x, y, alpha=0, lambda=lambdas)
fit$lambda.min
fit$lambda.min
lambdas = seq(0.05, 0.15, by=0.01)
lambdas
lambdas = seq(0.07, 0.15, by=0.001)
lambdas
fit = cv.glmnet(x, y, alpha=0, lambda=lambdas)
fit$lambda.min
y_pred = predict(fit, s=opt_lambda, newx=x)
sst <- sum((y - mean(y))^2)
sse <- sum((y_pred - y)^2)
rsq <- 1 - sse / sst
rsq
y_pred == y
y_pred
View(cbind(y, y_pred))
10^seq(3, -2, by = -.1)
seq(0.07, 0.15, by=0.001)
fit = cv.glmnet(x, y, alpha=0, lambda=lambdas)
plot(fit)
seq(0.01, 0.2, by=0.001)
fit = cv.glmnet(x, y, alpha=0, lambda=lambdas)
plot(fit)
10^seq(3, -2, by = -.1)
10^seq(3, -2, by = -.01)
10^seq(3, -2, by = -.05)
fit = cv.glmnet(x, y, alpha=0, lambda=lambdas)
plot(fit)
y = train$loss
x = train[-c(1,ncol(train))] %>% data.matrix()
lambdas = 10^seq(3, -2, by = -.05)
lambdas = 10^seq(3, -2, by = -.1)
fit = cv.glmnet(x, y, alpha=0, lambda=lambdas)
plot(fit)
opt_lambda = fit$lambda.min
opt_lambda
library(caret)
install.packages('caret')
library(caret)
library(caret)
library(caret)
install.packages("caret", dependencies = TRUE)
library(caret)
install.packages("Rcpp",  dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages("Rcpp", dependencies = TRUE, repos = "http://cran.us.r-project.org")
library(caret)
install.packages('Rcpp')
install.packages('Rcpp')
library(rmatio)
X = read.mat("X.mat")
X = matrix(unlist(X), ncol=20, byrow=TRUE)
View(X)
library(shiny)
library(ggplot2)
library(googlesheets)
library(stringr)
library(tidyr)
library(gridExtra)
library(dplyr)
setwd('/Users/AnnieTang/Documents/DUKE/17-18/GSF 366/gsf_shiny_app')
stem_subjs = c("Biology", "Chemistry", "Neuroscience", "BME", "ECE", "Mechanical Engineering",
"Computer Science", "Math", "Statistics", "Environmental Science", "Environmental Engineering")
extract_majors = function(s){
split = unlist(strsplit(s, ","))
split = trimws(split)
return(split)
}
is_stem = function(majors){
isStem = any(stem_subjs %in% majors)
if(isStem) return(1)
else return(0)
}
refresh_dat = function(){
# refresh OAuth token
gs_auth()
# rescrape data from google sheet
gsheet_title = "Survey: Technological Modifications of the Human  (Responses)"
gsheet = gs_title(gsheet_title)
ws_title = gs_ws_ls(gsheet)[1]
dat = gs_read(ss=gsheet, ws=ws_title)
dat = as.data.frame(dat)
# remove timestamp and extra column at end
dat = dat[c(-1, -ncol(dat))]
# switch order of B3 and B4, error in ordering of initial survey
dat = dat[,c(1,2,3,4,5,6,8,7,9,10,11,12,13,14,15,16,17,18)]
# set new column names for brevity
qcols = c(paste('A', seq(1,4), sep=""),
paste('B', seq(1,4), sep=""),
paste('C', seq(1,4), sep=""),
paste('D', seq(1,4), sep=""))
colnames(dat) = c(qcols, 'Majors', colnames(dat)[18])
# extract numerical graduating year
dat$Year = as.numeric(str_extract_all(dat$Year, "[0-9]+"))
dat$Year = as.factor(dat$Year)
# extract majors and create STEM column
dat$Majors = sapply(dat$Majors, extract_majors)
dat$Stem = sapply(dat$Majors, is_stem)
dat$Stem = as.factor(dat$Stem)
saveRDS(dat, file = "survey_dat.rds")
return(dat)
}
dat = refresh_dat()
dict = scan('key.txt', what='character', sep='\n')
dat = readRDS(file="survey_dat.rds")
red='#e78285'
blue='#91bbe4'
green='#51b797'
font='Calibri'
plot_theme = theme(plot.title = element_text(family=font,face="bold"),
axis.text = element_text(family = font),
axis.title = element_text(family=font),
legend.text = element_text(family=font))
runApp()
dat = readRDS(file = 'survey_dat.rds')
dat = dat %>% gather(scenario, Response, -Year, -Majors, -Stem)
colnames(dat) = c('majors', 'year', 'stem', 'scenario', 'response')
dat$response = as.factor(as.numeric(str_extract_all(dat$response, "[0-9]+")))
dat = dat[,c(5,4,1,2,3)]
dat$sophomore = as.numeric(dat$year == '2020')
dat$junior = as.numeric(dat$year == '2019')
dat$senior = as.numeric(dat$year == '2018')
dat = dat[-c(4)]
ubiq = c('A1', 'B1', 'C1', 'C2', 'D1')
dat$ubiquitous = as.numeric(dat$scenario %in% ubiq)
rest = c('A2', 'A3', 'B1', 'B2', 'C2', 'D2')
dat$restorative = as.numeric(dat$scenario %in% rest)
enh = c('A4', 'D1', 'D3', 'D4')
dat$enhancing = as.numeric(dat$scenario %in% enh)
gen = c('B3', 'B4', 'C3', 'C4', 'D3', 'D4')
dat$generative = as.numeric(dat$scenario %in% gen)
inv = c('A2', 'A3', 'A4', 'B1','B2','B3','B4','C2','C4','D2','D3','D4')
dat$invasive = as.numeric(dat$scenario %in% inv)
irr = c('A1', 'A2', 'A3', 'A4', 'B2', 'B3', 'B4', 'C1' ,'C2', 'C3', 'C4', 'D1')
dat$irreversible = as.numeric(dat$scenario %in% irr)
her = c('A2', 'A3', 'A4', 'C4')
dat$hereditary = as.numeric(dat$scenario %in% her)
library(nnet)
dat$response2 = relevel(dat$response, ref='2')
test = multinom(response2 ~ stem + sophomore + junior + senior + ubiquitous + restorative
+ enhancing + generative + invasive + irreversible + hereditary, data=dat)
summary(test)
z = summary(test)$coefficients/summary(test)$standard.errors
p = (1-pnorm(abs(z),0,1)) * 2
p
ggplot(data = dat, aes(x=restorative, y=response)) + geom_bar()
ggplot(data = dat, aes(x=restorative, y=response)) + geom_bar(stat='count', position='dodge',aes(fill=response))
ggplot(data = dat, aes(x=restorative, y=response)) + geom_histogram()
ggplot(data = dat, aes(x=restorative, y=response)) + geom_histogram(stat='count')
ggplot(data = dat, aes(x=restorative, y=response, fill=restorative)) + geom_bar(stat='identity', position='dodge')
summary(dat$restorative)
ggplot(data = dat, aes(x=restorative, y=response, fill=restorative)) + geom_bar(stat='count', position='dodge')
ggplot(data = dat, aes(x=restorative, y=response, fill=restorative)) + geom_bar(position='dodge')
dat$sophomore = as.factor(dat$sophomore)
dat$junior = as.factor(dat$junior)
dat$senior = as.factor(dat$senior)
dat$ubiquitous = as.factor(dat$ubiquitous)
dat$restorative = as.factor(dat$restorative)
dat$enhancing = as.factor(dat$enhancing)
dat$generative = as.factor(dat$generative)
dat$invasive = as.factor(dat$invasive)
dat$irreversible = as.factor(dat$irreversible)
dat$hereditary = as.factor(dat$hereditary)
ggplot(data = dat, aes(x=restorative, y=response, fill=restorative)) + geom_bar(stat='count',position='dodge')
ggplot(data = dat, aes(x=restorative, y=response, fill=restorative)) + geom_bar(position='dodge')
ggplot(data = dat, aes(x=restorative, y=response, fill=restorative))
ggplot(data = dat, aes(x=restorative, y=response, fill=restorative)) + geom_point()
ggplot(data = dat, aes(x=restorative, y=response, fill=restorative)) + geom_bar(position='dodge')
?geom_bar
ggplot(data = dat, aes(x=restorative, y=response, fill=restorative)) + geom_bar(position='dodge')
runApp()
ggplot(data = dat, aes(x=restorative, y=response, fill=restorative)) + geom_bar(stat='count',position='dodge')
ggplot(data = dat, aes(x=restorative, y=response, fill=restorative)) + geom_histogram()
ggplot(data = dat, aes(x=restorative,fill=restorative)) + geom_bar(aes(y=response))
ggplot(data = dat, aes(x=restorative, y=response, fill=restorative)) + geom_bar(stat='count',position='dodge')
ggplot(data = dat, aes(x=restorative,fill=restorative)) + geom_bar(stat='count',position='dodge')
ggplot(data = dat, aes(x=restorative,fill=response)) + geom_bar(stat='count',position='dodge')
ggplot(data = dat, aes(x=invasive,fill=response)) + geom_bar(stat='count',position='dodge')
dat = readRDS(file = 'survey_dat.rds')
dat = dat %>% gather(scenario, Response, -Year, -Majors, -Stem)
colnames(dat) = c('majors', 'year', 'stem', 'scenario', 'response')
dat$response = as.factor(dat$response)
dat = dat[,c(5,4,1,2,3)]
dat$sophomore = as.numeric(dat$year == '2020')
dat$junior = as.numeric(dat$year == '2019')
dat$senior = as.numeric(dat$year == '2018')
dat = dat[-c(4)]
ubiq = c('A1', 'B1', 'C1', 'C2', 'D1')
dat$ubiquitous = as.numeric(dat$scenario %in% ubiq)
rest = c('A2', 'A3', 'B1', 'B2', 'C2', 'D2')
dat$restorative = as.numeric(dat$scenario %in% rest)
enh = c('A4', 'D1', 'D3', 'D4')
dat$enhancing = as.numeric(dat$scenario %in% enh)
gen = c('B3', 'B4', 'C3', 'C4', 'D3', 'D4')
dat$generative = as.numeric(dat$scenario %in% gen)
inv = c('A2', 'A3', 'A4', 'B1','B2','B3','B4','C2','C4','D2','D3','D4')
dat$invasive = as.numeric(dat$scenario %in% inv)
irr = c('A1', 'A2', 'A3', 'A4', 'B2', 'B3', 'B4', 'C1' ,'C2', 'C3', 'C4', 'D1')
dat$irreversible = as.numeric(dat$scenario %in% irr)
her = c('A2', 'A3', 'A4', 'C4')
dat$hereditary = as.numeric(dat$scenario %in% her)
library(nnet)
dat$response2 = relevel(dat$response, ref='2: Neutral')
test = multinom(response2 ~ stem + sophomore + junior + senior + ubiquitous + restorative
+ enhancing + generative + invasive + irreversible + hereditary, data=dat)
summary(test)
z = summary(test)$coefficients/summary(test)$standard.errors
p = (1-pnorm(abs(z),0,1)) * 2
p
ggplot(data = dat, aes(x=restorative,fill=response)) + geom_bar(stat='count',position='dodge')
ggplot(data = dat, aes(x=invasive,fill=response)) + geom_bar(stat='count',position='dodge')
is.factor(dat$invasive)
dat$sophomore = as.factor(dat$sophomore)
is.factor(dat$stem)
dat$sophomore = as.factor(dat$sophomore)
dat$junior = as.factor(dat$junior)
dat$senior = as.factor(dat$senior)
stem_subjs = c("Biology", "Chemistry", "Neuroscience", "BME", "ECE", "Mechanical Engineering",
"Computer Science", "Math", "Statistics", "Environmental Science", "Environmental Engineering")
extract_majors = function(s){
split = unlist(strsplit(s, ","))
split = trimws(split)
return(split)
}
is_stem = function(majors){
isStem = any(stem_subjs %in% majors)
if(isStem) return(1)
else return(0)
}
refresh_dat = function(){
# refresh OAuth token
gs_auth()
# rescrape data from google sheet
gsheet_title = "Survey: Technological Modifications of the Human  (Responses)"
gsheet = gs_title(gsheet_title)
ws_title = gs_ws_ls(gsheet)[1]
dat = gs_read(ss=gsheet, ws=ws_title)
dat = as.data.frame(dat)
# remove timestamp and extra column at end
dat = dat[c(-1, -ncol(dat))]
# switch order of B3 and B4, error in ordering of initial survey
dat = dat[,c(1,2,3,4,5,6,8,7,9,10,11,12,13,14,15,16,17,18)]
# set new column names for brevity
qcols = c(paste('A', seq(1,4), sep=""),
paste('B', seq(1,4), sep=""),
paste('C', seq(1,4), sep=""),
paste('D', seq(1,4), sep=""))
colnames(dat) = c(qcols, 'Majors', colnames(dat)[18])
# extract numerical graduating year
dat$Year = as.numeric(str_extract_all(dat$Year, "[0-9]+"))
dat$Year = as.factor(dat$Year)
# extract majors and create STEM column
dat$Majors = sapply(dat$Majors, extract_majors)
dat$Stem = sapply(dat$Majors, is_stem)
saveRDS(dat, file = "survey_dat.rds")
return(dat)
}
dat = readRDS(file = 'survey_dat.rds')
dat = dat %>% gather(scenario, Response, -Year, -Majors, -Stem)
colnames(dat) = c('majors', 'year', 'stem', 'scenario', 'response')
dat$response = as.factor(dat$response)
dat = dat[,c(5,4,1,2,3)]
dat$sophomore = as.numeric(dat$year == '2020')
dat$sophomore = as.factor(dat$sophomore)
dat$junior = as.numeric(dat$year == '2019')
dat$junior = as.factor(dat$junior)
dat$senior = as.numeric(dat$year == '2018')
dat$senior = as.factor(dat$senior)
dat = dat[-c(4)]
ubiq = c('A1', 'B1', 'C1', 'C2', 'D1')
dat$ubiquitous = as.numeric(dat$scenario %in% ubiq)
dat$ubiquitous = as.factor(dat$ubiquitous)
rest = c('A2', 'A3', 'B1', 'B2', 'C2', 'D2')
dat$restorative = as.numeric(dat$scenario %in% rest)
dat$restorative = as.factor(dat$restorative)
enh = c('A4', 'D1', 'D3', 'D4')
dat$enhancing = as.numeric(dat$scenario %in% enh)
dat$enhancing = as.factor(dat$enhancing)
gen = c('B3', 'B4', 'C3', 'C4', 'D3', 'D4')
dat$generative = as.numeric(dat$scenario %in% gen)
dat$generative = as.factor(dat$generative)
inv = c('A2', 'A3', 'A4', 'B1','B2','B3','B4','C2','C4','D2','D3','D4')
dat$invasive = as.numeric(dat$scenario %in% inv)
dat$invasive = as.factor(dat$invasive)
irr = c('A1', 'A2', 'A3', 'A4', 'B2', 'B3', 'B4', 'C1' ,'C2', 'C3', 'C4', 'D1')
dat$irreversible = as.numeric(dat$scenario %in% irr)
dat$irreversible = as.factor(dat$irreversible)
her = c('A2', 'A3', 'A4', 'C4')
dat$hereditary = as.numeric(dat$scenario %in% her)
dat$hereditary = as.factor(dat$hereditary)
library(nnet)
dat$response2 = relevel(dat$response, ref='2: Neutral')
test = multinom(response2 ~ stem + sophomore + junior + senior + ubiquitous + restorative
+ enhancing + generative + invasive + irreversible + hereditary, data=dat)
summary(test)
z = summary(test)$coefficients/summary(test)$standard.errors
p = (1-pnorm(abs(z),0,1)) * 2
p
ggplot(data = dat, aes(x=restorative,fill=response)) + geom_bar(stat='count',position='dodge')
ggplot(data = dat, aes(x=invasive,fill=response)) + geom_bar(stat='count',position='dodge')
ggplot(data = dat, aes(x=invasive,fill=response)) + geom_bar(stat='count',position='dodge')
ggplot(data = dat, aes(x=response,fill=invasive)) + geom_bar(stat='count',position='dodge')
glm(response ~ stem + sophomore + junior + senior + ubiquitous + restorative +
enhancing + generative + invasive + irreversible + hereditary,
data = dat)
glm(response ~ factor(stem) + factor(ubiquitous),
data = dat)
summary(response)
summary(dat$response)
dat = dat[!(d$response == '2: Neutral'),]
dat = dat[!(dat$response == '2: Neutral'),]
glm(response ~ stem + sophomore + junior + senior + ubiquitous + restorative +
enhancing + generative + invasive + irreversible + hereditary,
data = dat)
dat$response = as.factor(as.numeric(str_extract_all(dat$response, "[0-9]+")))
binary_response = function(x){
if(x==1) return(0) # oppose
else return(1) # support
}
dat = readRDS(file = 'survey_dat.rds')
dat = dat %>% gather(scenario, Response, -Year, -Majors, -Stem)
colnames(dat) = c('majors', 'year', 'stem', 'scenario', 'response')
dat$response = as.factor(dat$response)
dat = dat[,c(5,4,1,2,3)]
dat$sophomore = as.numeric(dat$year == '2020')
dat$sophomore = as.factor(dat$sophomore)
dat$junior = as.numeric(dat$year == '2019')
dat$junior = as.factor(dat$junior)
dat$senior = as.numeric(dat$year == '2018')
dat$senior = as.factor(dat$senior)
dat = dat[-c(4)]
ubiq = c('A1', 'B1', 'C1', 'C2', 'D1')
dat$ubiquitous = as.numeric(dat$scenario %in% ubiq)
dat$ubiquitous = as.factor(dat$ubiquitous)
rest = c('A2', 'A3', 'B1', 'B2', 'C2', 'D2')
dat$restorative = as.numeric(dat$scenario %in% rest)
dat$restorative = as.factor(dat$restorative)
enh = c('A4', 'D1', 'D3', 'D4')
dat$enhancing = as.numeric(dat$scenario %in% enh)
dat$enhancing = as.factor(dat$enhancing)
gen = c('B3', 'B4', 'C3', 'C4', 'D3', 'D4')
dat$generative = as.numeric(dat$scenario %in% gen)
dat$generative = as.factor(dat$generative)
inv = c('A2', 'A3', 'A4', 'B1','B2','B3','B4','C2','C4','D2','D3','D4')
dat$invasive = as.numeric(dat$scenario %in% inv)
dat$invasive = as.factor(dat$invasive)
irr = c('A1', 'A2', 'A3', 'A4', 'B2', 'B3', 'B4', 'C1' ,'C2', 'C3', 'C4', 'D1')
dat$irreversible = as.numeric(dat$scenario %in% irr)
dat$irreversible = as.factor(dat$irreversible)
her = c('A2', 'A3', 'A4', 'C4')
dat$hereditary = as.numeric(dat$scenario %in% her)
dat$hereditary = as.factor(dat$hereditary)
library(nnet)
dat$response2 = relevel(dat$response, ref='2: Neutral')
test = multinom(response2 ~ stem + sophomore + junior + senior + ubiquitous + restorative
+ enhancing + generative + invasive + irreversible + hereditary, data=dat)
summary(test)
z = summary(test)$coefficients/summary(test)$standard.errors
p = (1-pnorm(abs(z),0,1)) * 2
p
dat = dat[!(dat$response == '2: Neutral'),]
dat$response = as.numeric(str_extract_all(dat$response, "[0-9]+"))
binary_response = function(x){
if(x==1) return(0) # oppose
else return(1) # support
}
dat$response = sapply(dat$response, binary_response)
glm(response ~ stem + sophomore + junior + senior + ubiquitous + restorative +
enhancing + generative + invasive + irreversible + hereditary,
data = dat)
dat$response = as.factor(dat$response)
glm(response ~ stem + sophomore + junior + senior + ubiquitous + restorative +
enhancing + generative + invasive + irreversible + hereditary,
data = dat)
dat = readRDS(file = 'survey_dat.rds')
dat = dat %>% gather(scenario, Response, -Year, -Majors, -Stem)
colnames(dat) = c('majors', 'year', 'stem', 'scenario', 'response')
dat$response = as.factor(dat$response)
dat = dat[,c(5,4,1,2,3)]
dat$sophomore = as.numeric(dat$year == '2020')
dat$sophomore = as.factor(dat$sophomore)
dat$junior = as.numeric(dat$year == '2019')
dat$junior = as.factor(dat$junior)
dat$senior = as.numeric(dat$year == '2018')
dat$senior = as.factor(dat$senior)
dat = dat[-c(4)]
ubiq = c('A1', 'B1', 'C1', 'C2', 'D1')
dat$ubiquitous = as.numeric(dat$scenario %in% ubiq)
dat$ubiquitous = as.factor(dat$ubiquitous)
rest = c('A2', 'A3', 'B1', 'B2', 'C2', 'D2')
dat$restorative = as.numeric(dat$scenario %in% rest)
dat$restorative = as.factor(dat$restorative)
enh = c('A4', 'D1', 'D3', 'D4')
dat$enhancing = as.numeric(dat$scenario %in% enh)
dat$enhancing = as.factor(dat$enhancing)
gen = c('B3', 'B4', 'C3', 'C4', 'D3', 'D4')
dat$generative = as.numeric(dat$scenario %in% gen)
dat$generative = as.factor(dat$generative)
inv = c('A2', 'A3', 'A4', 'B1','B2','B3','B4','C2','C4','D2','D3','D4')
dat$invasive = as.numeric(dat$scenario %in% inv)
dat$invasive = as.factor(dat$invasive)
irr = c('A1', 'A2', 'A3', 'A4', 'B2', 'B3', 'B4', 'C1' ,'C2', 'C3', 'C4', 'D1')
dat$irreversible = as.numeric(dat$scenario %in% irr)
dat$irreversible = as.factor(dat$irreversible)
her = c('A2', 'A3', 'A4', 'C4')
dat$hereditary = as.numeric(dat$scenario %in% her)
dat$hereditary = as.factor(dat$hereditary)
glm(response ~ stem + sophomore + junior + senior + ubiquitous + restorative +
enhancing + generative + invasive + irreversible + hereditary,
data = dat, family = "binomial")
logit_fit = glm(response ~ stem + sophomore + junior + senior + ubiquitous + restorative +
enhancing + generative + invasive + irreversible + hereditary,
data = dat, family = "binomial")
summary(logit_fit)
dat = dat[!(dat$response == '2: Neutral'),]
logit_fit = glm(response ~ stem + sophomore + junior + senior + ubiquitous + restorative +
enhancing + generative + invasive + irreversible + hereditary,
data = dat, family = "binomial")
summary(logit_fit)
logit_fit$coefficients
exp(logit_fit$coefficients)
exp(logit_fit$coefficients)/(1+exp(logit_fit$coefficients))
dat = readRDS(file = 'survey_dat.rds')
dat = dat %>% gather(scenario, Response, -Year, -Majors, -Stem)
colnames(dat) = c('majors', 'year', 'stem', 'scenario', 'response')
dat$response = as.factor(dat$response)
dat = dat[,c(5,4,1,2,3)]
dat$sophomore = as.numeric(dat$year == '2020')
dat$sophomore = as.factor(dat$sophomore)
dat$junior = as.numeric(dat$year == '2019')
dat$junior = as.factor(dat$junior)
dat$senior = as.numeric(dat$year == '2018')
dat$senior = as.factor(dat$senior)
dat = dat[-c(4)]
ubiq = c('A1', 'B1', 'C1', 'C2', 'D1')
dat$ubiquitous = as.numeric(dat$scenario %in% ubiq)
dat$ubiquitous = as.factor(dat$ubiquitous)
rest = c('A2', 'A3', 'B1', 'B2', 'C2', 'D2')
dat$restorative = as.numeric(dat$scenario %in% rest)
dat$restorative = as.factor(dat$restorative)
enh = c('A4', 'D1', 'D3', 'D4')
dat$enhancing = as.numeric(dat$scenario %in% enh)
dat$enhancing = as.factor(dat$enhancing)
gen = c('B3', 'B4', 'C3', 'C4', 'D3', 'D4')
dat$generative = as.numeric(dat$scenario %in% gen)
dat$generative = as.factor(dat$generative)
inv = c('A2', 'A3', 'A4', 'B1','B2','B3','B4','C2','C4','D2','D3','D4')
dat$invasive = as.numeric(dat$scenario %in% inv)
dat$invasive = as.factor(dat$invasive)
irr = c('A1', 'A2', 'A3', 'A4', 'B2', 'B3', 'B4', 'C1' ,'C2', 'C3', 'C4', 'D1')
dat$irreversible = as.numeric(dat$scenario %in% irr)
dat$irreversible = as.factor(dat$irreversible)
her = c('A2', 'A3', 'A4', 'C4')
dat$hereditary = as.numeric(dat$scenario %in% her)
dat$hereditary = as.factor(dat$hereditary)
library(nnet)
dat$response2 = relevel(dat$response, ref='2: Neutral')
test = multinom(response2 ~ stem + sophomore + junior + senior + ubiquitous + restorative
+ enhancing + generative + invasive + irreversible + hereditary, data=dat)
summary(test)
z = summary(test)$coefficients/summary(test)$standard.errors
p = (1-pnorm(abs(z),0,1)) * 2
p
summary(test)
summary(test)$coefficients
exp(summary(test)$coefficients)/(1+exp(summary(test)$coefficients))
